
heat_template_version: 2018-08-31

description: Template to deploy all virtual machines of the final scenario

resources:
  # Security Group definition
  open:
    type: OS::Neutron::SecurityGroup
    properties:
      name: open
      description: >
        Security group rules.
        Allows connection between all VMs in our scenario.
      rules:
         #1 ingress: IPv4
         - { direction: ingress }
         #2 egress: IPv4
         - { direction: egress  }
  # Network resources definition
  net1:
    type: OS::Neutron::Net
    properties:
      name: net1
  subnet1:
    type: OS::Neutron::Subnet
    properties:
     name: subnet1
     network_id: {get_resource: net1}
     allocation_pools: [{"start": 10.1.1.2, "end": 10.1.1.20}]
     gateway_ip: 10.1.1.1
     cidr: 10.1.1.0/24
     dns_nameservers: ['8.8.8.8','8.8.4.4']
  net2:
    type: OS::Neutron::Net
    properties:
      name: net2
  subnet2:
    type: OS::Neutron::Subnet
    properties:
     name: subnet2
     network_id: {get_resource: net2}
     allocation_pools: [{"start": 10.1.2.2, "end": 10.1.2.20}]
     gateway_ip: 10.1.2.1
     cidr: 10.1.2.0/24
     dns_nameservers: ['8.8.8.8','8.8.4.4']
  router:
    type: OS::Neutron::Router
    properties:
      name: "Firewall"
      external_gateway_info: {network: ExtNet}
  router_if1:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: subnet1}
  # Floating IPs association
  admin_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: net1 }
      security_groups: [ { get_resource: open } ]
  admin_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ExtNet
      port_id: { get_resource: admin_port }
  lb_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: ExtNet
      port_id: { get_attr: [lb, vip_port_id ]}
  admin_fi_asoc:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: admin_floating_ip }
      port_id: { get_resource: admin_port }
  # Key pair creation
  my_key:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: my_key
  # Web App Servers definition
  s1:
    type: OS::Nova::Server
    properties:
      name: s1
      image: web_server
      flavor: m1.smaller
      user_data_format: RAW
      user_data: |
        #cloud-config
        runcmd:
          - ifconfig ens4 up
          - dhclient ens4
          - IP=`ifconfig | grep 10.1.1 | awk '{print $2}' | cut -d \: -f 2`
          - node /etc/app.js $IP $HOSTNAME
      security_groups:
              - { get_resource: open}
      networks:
        - network: {get_resource: net1}
        - network: {get_resource: net2}
  s2:
    type: OS::Nova::Server
    properties:
      name: s2
      image: web_server
      flavor: m1.smaller
      user_data_format: RAW
      user_data: |
        #cloud-config
        runcmd:
          - ifconfig ens4 up
          - dhclient ens4
          - IP=`ifconfig | grep 10.1.1 | awk '{print $2}' | cut -d \: -f 2`
          - node /etc/app.js $IP $HOSTNAME
      security_groups:
        - { get_resource: open}
      networks:
        - network: {get_resource: net1}
        - network: {get_resource: net2}
  s3:
    type: OS::Nova::Server
    properties:
      name: s3
      image: web_server
      flavor: m1.smaller
      user_data_format: RAW
      user_data: |
        #cloud-config
        runcmd:
          - ifconfig ens4 up
          - dhclient ens4
          - IP=`ifconfig | grep 10.1.1 | awk '{print $2}' | cut -d \: -f 2`
          - node /etc/app.js $IP $HOSTNAME
      security_groups:
        - { get_resource: open}
      networks:
        - network: {get_resource: net1}
        - network: {get_resource: net2}
  # MongoDB Server
  bbdd:
    type: OS::Nova::Server
    properties:
      name: bbdd
      image: mongoVM
      flavor: m1.smaller
      user_data_format: RAW
      user_data: |
        #cloud-config
        runcmd:
          - service mongod start
      security_groups:
        - { get_resource: open}
      networks:
       - network: {get_resource: net2}
  # Load Balancer definition
  lb:
    type: OS::Neutron::LBaaS::LoadBalancer
    properties:
     name: LB
     vip_subnet: {get_resource: subnet1}
  pool_member1:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ s1, networks, net1, 0]}
      protocol_port: 80
      subnet: { get_resource: subnet1}
  pool_member2:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ s2, networks, net1, 0]}
      protocol_port: 80
      subnet: { get_resource: subnet1}
  pool_member3:
    type: OS::Neutron::LBaaS::PoolMember
    properties:
      pool: { get_resource: pool }
      address: { get_attr: [ s3, networks, net1, 0]}
      protocol_port: 80
      subnet: { get_resource: subnet1}
  pool:
    type: OS::Neutron::LBaaS::Pool
    properties:
      lb_algorithm: ROUND_ROBIN
      protocol: HTTP
      listener: { get_resource: listener }
      name: http_pool
  listener:
    type: OS::Neutron::LBaaS::Listener
    properties:
      loadbalancer: { get_resource: lb }
      protocol: HTTP
      protocol_port: 80
  # Admin Server definition
  admin:
    type: OS::Nova::Server
    properties:
      name: admin
      image: xenial-server-cloudimg-amd64-vnx
      key_name: { get_resource: my_key }
      flavor: m1.smaller
      networks:
       - port: {get_resource: admin_port}
       - network: {get_resource: net2} 
